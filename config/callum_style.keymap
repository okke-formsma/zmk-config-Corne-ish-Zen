/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define DEF_L 0
#define NAV_L 1
#define NUM_L 2
#define FUN_L 3

#include "combos.keymap"

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <125>;
    quick-tap-ms = <100>;
};

/ {
    behaviors {
        sm: sticky_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_MOD";
            #binding-cells = <1>;
            release-after-ms = <1500>;
            bindings = <&kp>;
            ignore-modifiers;
            quick-release;
        };
    };

    macros {
        // send cancel key before nav_l to disable caps_word
        slnav: sl_nav {
            label = "SL_NAV";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &kp K_CANCEL>
                , <&macro_press &mo NAV_L>
                , <&macro_pause_for_release>
                , <&macro_release &mo NAV_L>
                ;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV_L NUM_L>;
            then-layer = <FUN_L>;
        };
    };
};



/ {
    keymap {
        compatible = "zmk,keymap";

        def_layer {
            label = "default";
            bindings = <
&kp Q  &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P   
&kp A  &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp QUOT
&kp Z &mt RGUI X &kp C &kp V &kp B &kp N &kp M &kp CMMA &mt RGUI DOT  &kp SCLN
            &kp TAB &slnav &kp SPC         &sm LSHIFT &mo NUM_L &kp ESC
            >;
        };

        nav_layer {
            label = "navi";
            bindings = <
&none &none &none &none &none &kp HOME &kp PGDN &kp PGUP &kp END &none
&sm LCTRL &sm LGUI &sm LALT &sm LSHFT &none &kp LARW &kp DARW &kp UARW &kp RARW &none
&none &none &none &none &none &none &none &none &none &none
            &trans &trans &trans &trans &trans &trans
            >;
        };
        num_layer {
            label = "numbers";
            bindings = <
&kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp NUMBER_4 &kp NUMBER_5 &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &kp NUMBER_0
&sm LCTRL &sm LGUI &sm LALT &sm LSHFT &kp F11 &kp F12 &sm RSHFT &sm RALT &sm LGUI &sm RCTRL
&kp ESC &kp GRAVE &kp MINUS &kp EQUAL &none &none &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp BACKSLASH &kp SLASH
            &trans &trans &trans &trans &trans &trans
            >;
        };
        fun_layer {
            label = "functions";
            bindings = <
&kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
&sm LCTRL &sm LGUI &sm LALT &sm LSHFT &kp F11 &kp F12 &sm RSHFT &sm RALT &sm LGUI &sm RCTRL
&bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &none &none &none &none &none 
            &trans &trans &trans &trans &trans &trans
            >;
        };
    };
};
